<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="Places/Exit" type="0" type_size="1" nature="4" stm_value_name="Places/Exit" inner="1" tooltip="Places/Exit desc" id="4" /><Input name="Places/Relocalize" type="0" type_size="1" nature="4" stm_value_name="Places/Relocalize" inner="1" tooltip="Places/Relocalize desc" id="5" /><Input name="Places/LoadPlaces" type="0" type_size="1" nature="4" stm_value_name="Places/LoadPlaces" inner="1" tooltip="Places/LoadPlaces desc" id="6" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="7" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Display map" id="1" localization="8" tooltip="" x="265" y="404"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        try:
            self.exploManager = self.session().service("ExplorationManager")
        except Exception as e:
            self.logger.warning("Unable to reach ExplorationManager service: " + str(e))
            self.exploManager = None
            self.onUnload()
            self.onStopped()
        self.mem = self.session().service("ALMemory")
        self.tts = self.session().service("ALAnimatedSpeech")
        self.life = self.session().service("ALAutonomousLife")
        self.events = {"exploList": "Places/AvailableExplo",
                        "exit": "Places/Exit"}
        self.declareEvents()

    def declareEvents(self):
        for k in self.events:
            self.mem.declareEvent(self.events[k])

    def onLoad(self):
        self.life.setSafeguardEnabled("RobotMoved", False)
        self.life.setSafeguardEnabled("RobotPushed", False)
        self.ba = self.session().service("ALBasicAwareness")
        self.ba.stopAwareness()
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        if self.exploManager == None or not(self.exploManager.showWebPage()):
            self.onStopped()
            return
        #self.onStopped() #activate the output of the box
        list = self.exploManager.getAvailableExplorations()
        if len(list) < 1:
            self.tts.say("I have never been here, please use explore app before.")
            self.onStopped()
            return
        if self.exploManager.isExplorationLoaded():
            self.exploManager.showPlaces()
            self.tts.say("You can add new places to the map by clicking on it. Don't forget to save them")
        else:
            self.tts.say("Please select an exploration to load from the list")
        self.logger.info("available explo: " + str(list))

        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Patrol panel" id="3" localization="8" tooltip="" x="581" y="330"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import time
import almath as m
import qi

try:
    from almath import OccupancyMapParams
    from almath import Point2Di
except:
    class Point2Di:
        def __init__(self, x, y):
            self.x = x
            self.y = y

    class OccupancyMapParams:
        def __init__(self, size, metersPerPixel, originOffest):
            self.size = size
            self.metersPerPixel = metersPerPixel
            # Metric coordinates of the (0, 0) pixel.
            self.originOffset = m.Position2D(0, 0)
            self.originOffset.x = originOffest.x
            self.originOffset.y = originOffest.y

        def getPositionFromPixel(self, pixel):
            return m.Position2D(pixel.x * self.metersPerPixel + self.originOffset.x, -pixel.y * self.metersPerPixel + self.originOffset.y)

        def getPixelFromPosition(self, position):
            return m.Position2D((position.x - self.originOffset.x) / self.metersPerPixel, (self.originOffset.y - position.y) / self.metersPerPixel)

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.session = qi.Session()
        self.session.connect("tcp://127.0.0.1:9559")
        self.mem = self.session.service("ALMemory")
        self.nav = self.session.service("ALNavigation")
        self.tts = self.session.service("ALAnimatedSpeech")
        self.dialog = self.session.service("ALDialog")
        self.stopPlaces = False
        self.infinitePlaces = False
        try:
            self.exploManager = self.session.service("ExplorationManager")
        except:
            self.tts.say("Please install application Places to run Places")
            self.onInput_onStop()
            return
        self.events = {"metricalMap": "Places/MetricalMap",
                       "exploList": "Places/AvailableExplo",
                       "waypoints": "Places/Waypoints",
                       "addwaypoint": "Places/AddWayPoint",
                       "startPlaces": "Places/StartPlaces",
                       "reset": "Places/Reset",
                       "relocalize": "Places/Relocalize",
                       "exit": "Places/Exit",
                       "stopPlaces": "Places/StopPlaces",
                       "PlacesStarted": "Places/PlacesStarted",
                       "PlacesFinished": "Places/PlacesFinished",
                       "infinitePlaces": "Places/OnInfinitePlacesChanged"}
        self.waypoints = []
        self.waypointsPx = []

    def declareEvents(self):
        for k in self.events:
            self.mem.declareEvent(self.events[k])

    def onLoad(self):
        self.declareEvents()
        pass

    def onUnload(self):
        self.onStopDialog()
        self.nav.stopLocalization()
        pass

    def updateRobotPosition(self):
        robot_pose = m.Pose2D(self.nav.getRobotPositionInMap()[0])
        position = m.Position2D(robot_pose.x, robot_pose.y)
        pxl = self.occMap.getPixelFromPosition(position)
        pxl_front = self.occMap.getPixelFromPosition(m.position2DFromPose2D(robot_pose * m.Pose2D(0.2, 0, 0)))
        radius = 0.2 / self.occMap.metersPerPixel
        self.mem.raiseEvent("Places/RobotPosition", [[int(pxl.x), int(pxl.y)], int(radius), [int(pxl_front.x), int(pxl_front.y)]])

    def startDialog(self):
        self.setDialogConcept()
        self.onStartDialog()

    def setDialogConcept(self):
        places = self.exploManager.getPlaces()
        list = []
        for place in places:
            list.append(place)
        list.append("Places")
        self.dialog.setConcept("Places/waypointlist", "enu", list)

    def onInput_onStart(self):
        self.tts.say("onstart")

#        if not(self.exploManager):
#            return
#        occMap = self.exploManager.getOccupancyMapParams()
#        self.occMap = OccupancyMapParams(occMap[0], occMap[1], m.Position2D())
#        self.occMap.originOffset = m.Position2D(occMap[2][0], occMap[2][1])
#        if self.exploManager.isLocalized():
#            self.onLocalized()
#        else:
#            self.tts.say("Please help me localizing by clicking the map where you think I am")

    def onInput_onRelocalize(self, target):
        if not(self.exploManager):
            return
        occMap = self.exploManager.getOccupancyMapParams()
        self.occMap = OccupancyMapParams(occMap[0], occMap[1], m.Position2D())
        self.occMap.originOffset = m.Position2D(occMap[2][0], occMap[2][1])
        if self.exploManager.isLocalized():
            self.onLocalized()
        self.tts.say("Please take a step back back so that I can take a look")
        time.sleep(3)
        px = Point2Di(target[0], target[1])
        self.logger.info("px: " + str(px.x))

        metrical_target = self.occMap.getPositionFromPixel(px)
        self.logger.info("px: " + str(px))
        self.logger.info("relocalize at: " + str(metrical_target))
        try:
            self.nav.relocalizeInMap([metrical_target.x, metrical_target.y, 0.0])
            self.onLocalized()
        except Exception as e:
            self.logger.info(str(e))

    def onLocalized(self):
        try:
            self.nav.startLocalization()
            self.updateRobotPosition()
        except Exception as e:
            self.logger.info(str(e))

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onAddWayPoint" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="onStartPatrol" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" /><Input name="onRelocalize" type="0" type_size="1" nature="1" inner="0" tooltip="" id="7" /><Input name="onWordRecognized" type="3" type_size="1" nature="1" inner="0" tooltip="" id="8" /><Input name="onStopPatrol" type="1" type_size="1" nature="1" inner="0" tooltip="" id="9" /><Input name="onInfinitePatrolChanged" type="0" type_size="1" nature="1" inner="0" tooltip="" id="10" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="11" /><Output name="onStartDialog" type="1" type_size="1" nature="2" inner="0" tooltip="" id="12" /><Output name="onStopDialog" type="1" type_size="1" nature="2" inner="0" tooltip="" id="13" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="7" outputowner="3" indexofoutput="11" /><Link inputowner="3" indexofinput="7" outputowner="0" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>